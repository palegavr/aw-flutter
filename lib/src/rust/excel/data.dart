// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:aw_flutter/src/rust/frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class ExportedData {
  final int year;
  final String typeName;
  final OutputMainTable mainTable;
  final List<OutputPersonalTables> personalTables;

  const ExportedData({
    required this.year,
    required this.typeName,
    required this.mainTable,
    required this.personalTables,
  });

  @override
  int get hashCode =>
      year.hashCode ^
      typeName.hashCode ^
      mainTable.hashCode ^
      personalTables.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExportedData &&
          runtimeType == other.runtimeType &&
          year == other.year &&
          typeName == other.typeName &&
          mainTable == other.mainTable &&
          personalTables == other.personalTables;
}

class InputRawRow {
  final String learningForm;
  final String speciality;
  final String name;
  final String course;
  final String semester;
  final String weeksCount;
  final String studentsCount;
  final String flowsCount;
  final String groupsCount;
  final String subgroupsCount;
  final String lecturesPlannedCount;
  final String lecturesTotalCount;
  final String practicesPlannedCount;
  final String practicesTotalCount;
  final String labsPlannedCount;
  final String labsTotalCount;
  final String exams;
  final String examConsults;
  final String tests;
  final String qualWorks;
  final String certificationExams;
  final String workingPractice;
  final String teachingPractice;
  final String consults;
  final String individualWorks;
  final String courseWorks;
  final String postgraduateExams;
  final String supervising;
  final String internship;

  const InputRawRow({
    required this.learningForm,
    required this.speciality,
    required this.name,
    required this.course,
    required this.semester,
    required this.weeksCount,
    required this.studentsCount,
    required this.flowsCount,
    required this.groupsCount,
    required this.subgroupsCount,
    required this.lecturesPlannedCount,
    required this.lecturesTotalCount,
    required this.practicesPlannedCount,
    required this.practicesTotalCount,
    required this.labsPlannedCount,
    required this.labsTotalCount,
    required this.exams,
    required this.examConsults,
    required this.tests,
    required this.qualWorks,
    required this.certificationExams,
    required this.workingPractice,
    required this.teachingPractice,
    required this.consults,
    required this.individualWorks,
    required this.courseWorks,
    required this.postgraduateExams,
    required this.supervising,
    required this.internship,
  });

  @override
  int get hashCode =>
      learningForm.hashCode ^
      speciality.hashCode ^
      name.hashCode ^
      course.hashCode ^
      semester.hashCode ^
      weeksCount.hashCode ^
      studentsCount.hashCode ^
      flowsCount.hashCode ^
      groupsCount.hashCode ^
      subgroupsCount.hashCode ^
      lecturesPlannedCount.hashCode ^
      lecturesTotalCount.hashCode ^
      practicesPlannedCount.hashCode ^
      practicesTotalCount.hashCode ^
      labsPlannedCount.hashCode ^
      labsTotalCount.hashCode ^
      exams.hashCode ^
      examConsults.hashCode ^
      tests.hashCode ^
      qualWorks.hashCode ^
      certificationExams.hashCode ^
      workingPractice.hashCode ^
      teachingPractice.hashCode ^
      consults.hashCode ^
      individualWorks.hashCode ^
      courseWorks.hashCode ^
      postgraduateExams.hashCode ^
      supervising.hashCode ^
      internship.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is InputRawRow &&
          runtimeType == other.runtimeType &&
          learningForm == other.learningForm &&
          speciality == other.speciality &&
          name == other.name &&
          course == other.course &&
          semester == other.semester &&
          weeksCount == other.weeksCount &&
          studentsCount == other.studentsCount &&
          flowsCount == other.flowsCount &&
          groupsCount == other.groupsCount &&
          subgroupsCount == other.subgroupsCount &&
          lecturesPlannedCount == other.lecturesPlannedCount &&
          lecturesTotalCount == other.lecturesTotalCount &&
          practicesPlannedCount == other.practicesPlannedCount &&
          practicesTotalCount == other.practicesTotalCount &&
          labsPlannedCount == other.labsPlannedCount &&
          labsTotalCount == other.labsTotalCount &&
          exams == other.exams &&
          examConsults == other.examConsults &&
          tests == other.tests &&
          qualWorks == other.qualWorks &&
          certificationExams == other.certificationExams &&
          workingPractice == other.workingPractice &&
          teachingPractice == other.teachingPractice &&
          consults == other.consults &&
          individualWorks == other.individualWorks &&
          courseWorks == other.courseWorks &&
          postgraduateExams == other.postgraduateExams &&
          supervising == other.supervising &&
          internship == other.internship;
}

class OutputHoursRow {
  final double lectures;
  final double practices;
  final double labs;
  final double exams;
  final double examConsults;
  final double tests;
  final double qualWorks;
  final double workingPractice;
  final double teachingPractice;
  final double consults;
  final double individualWorks;
  final double courseWorks;
  final double supervising;
  final double total;

  const OutputHoursRow({
    required this.lectures,
    required this.practices,
    required this.labs,
    required this.exams,
    required this.examConsults,
    required this.tests,
    required this.qualWorks,
    required this.workingPractice,
    required this.teachingPractice,
    required this.consults,
    required this.individualWorks,
    required this.courseWorks,
    required this.supervising,
    required this.total,
  });

  @override
  int get hashCode =>
      lectures.hashCode ^
      practices.hashCode ^
      labs.hashCode ^
      exams.hashCode ^
      examConsults.hashCode ^
      tests.hashCode ^
      qualWorks.hashCode ^
      workingPractice.hashCode ^
      teachingPractice.hashCode ^
      consults.hashCode ^
      individualWorks.hashCode ^
      courseWorks.hashCode ^
      supervising.hashCode ^
      total.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutputHoursRow &&
          runtimeType == other.runtimeType &&
          lectures == other.lectures &&
          practices == other.practices &&
          labs == other.labs &&
          exams == other.exams &&
          examConsults == other.examConsults &&
          tests == other.tests &&
          qualWorks == other.qualWorks &&
          workingPractice == other.workingPractice &&
          teachingPractice == other.teachingPractice &&
          consults == other.consults &&
          individualWorks == other.individualWorks &&
          courseWorks == other.courseWorks &&
          supervising == other.supervising &&
          total == other.total;
}

class OutputMainRateAndHours {
  final double rate;
  final OutputHoursRow semester1;
  final OutputHoursRow semester2;
  final OutputHoursRow year;

  const OutputMainRateAndHours({
    required this.rate,
    required this.semester1,
    required this.semester2,
    required this.year,
  });

  @override
  int get hashCode =>
      rate.hashCode ^ semester1.hashCode ^ semester2.hashCode ^ year.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutputMainRateAndHours &&
          runtimeType == other.runtimeType &&
          rate == other.rate &&
          semester1 == other.semester1 &&
          semester2 == other.semester2 &&
          year == other.year;
}

class OutputMainTable {
  final List<OutputMainWorkerRow> heads;
  final OutputMainRateAndHours headsTotal;
  final List<OutputMainWorkerRow> professors;
  final OutputMainRateAndHours professorsTotal;
  final List<OutputMainWorkerRow> associateProfessors;
  final OutputMainRateAndHours associateProfessorsTotal;
  final List<OutputMainWorkerRow> lecturers;
  final OutputMainRateAndHours lecturersTotal;
  final List<OutputMainWorkerRow> assistants;
  final OutputMainRateAndHours assistantsTotal;
  final List<OutputMainWorkerRow> partTimers;
  final OutputMainRateAndHours partTimersTotal;
  final OutputMainRateAndHours total;

  const OutputMainTable({
    required this.heads,
    required this.headsTotal,
    required this.professors,
    required this.professorsTotal,
    required this.associateProfessors,
    required this.associateProfessorsTotal,
    required this.lecturers,
    required this.lecturersTotal,
    required this.assistants,
    required this.assistantsTotal,
    required this.partTimers,
    required this.partTimersTotal,
    required this.total,
  });

  @override
  int get hashCode =>
      heads.hashCode ^
      headsTotal.hashCode ^
      professors.hashCode ^
      professorsTotal.hashCode ^
      associateProfessors.hashCode ^
      associateProfessorsTotal.hashCode ^
      lecturers.hashCode ^
      lecturersTotal.hashCode ^
      assistants.hashCode ^
      assistantsTotal.hashCode ^
      partTimers.hashCode ^
      partTimersTotal.hashCode ^
      total.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutputMainTable &&
          runtimeType == other.runtimeType &&
          heads == other.heads &&
          headsTotal == other.headsTotal &&
          professors == other.professors &&
          professorsTotal == other.professorsTotal &&
          associateProfessors == other.associateProfessors &&
          associateProfessorsTotal == other.associateProfessorsTotal &&
          lecturers == other.lecturers &&
          lecturersTotal == other.lecturersTotal &&
          assistants == other.assistants &&
          assistantsTotal == other.assistantsTotal &&
          partTimers == other.partTimers &&
          partTimersTotal == other.partTimersTotal &&
          total == other.total;
}

class OutputMainWorkerRow {
  final String firstName;
  final String middleName;
  final String lastName;
  final String rank;
  final OutputMainRateAndHours rateAndHours;

  const OutputMainWorkerRow({
    required this.firstName,
    required this.middleName,
    required this.lastName,
    required this.rank,
    required this.rateAndHours,
  });

  @override
  int get hashCode =>
      firstName.hashCode ^
      middleName.hashCode ^
      lastName.hashCode ^
      rank.hashCode ^
      rateAndHours.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutputMainWorkerRow &&
          runtimeType == other.runtimeType &&
          firstName == other.firstName &&
          middleName == other.middleName &&
          lastName == other.lastName &&
          rank == other.rank &&
          rateAndHours == other.rateAndHours;
}

class OutputPersonalSemesterRow {
  final String name;
  final String learningForm;
  final String speciality;
  final String group;
  final String course;
  final int studentsCount;
  final OutputHoursRow hours;
  final bool mergeLecturesWithNext;

  const OutputPersonalSemesterRow({
    required this.name,
    required this.learningForm,
    required this.speciality,
    required this.group,
    required this.course,
    required this.studentsCount,
    required this.hours,
    required this.mergeLecturesWithNext,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      learningForm.hashCode ^
      speciality.hashCode ^
      group.hashCode ^
      course.hashCode ^
      studentsCount.hashCode ^
      hours.hashCode ^
      mergeLecturesWithNext.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutputPersonalSemesterRow &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          learningForm == other.learningForm &&
          speciality == other.speciality &&
          group == other.group &&
          course == other.course &&
          studentsCount == other.studentsCount &&
          hours == other.hours &&
          mergeLecturesWithNext == other.mergeLecturesWithNext;
}

class OutputPersonalTable {
  final int id;
  final String firstName;
  final String middleName;
  final String lastName;
  final String commentSemester1;
  final String commentSemester2;
  final String rank;
  final List<OutputPersonalSemesterRow> semester1;
  final double semester1Rate;
  final OutputHoursRow semester1TotalDay;
  final OutputHoursRow semester1TotalEvening;
  final OutputHoursRow semester1Total;
  final List<OutputPersonalSemesterRow> semester2;
  final double semester2Rate;
  final OutputHoursRow semester2TotalDay;
  final OutputHoursRow semester2TotalEvening;
  final OutputHoursRow semester2Total;
  final OutputHoursRow yearTotal;

  const OutputPersonalTable({
    required this.id,
    required this.firstName,
    required this.middleName,
    required this.lastName,
    required this.commentSemester1,
    required this.commentSemester2,
    required this.rank,
    required this.semester1,
    required this.semester1Rate,
    required this.semester1TotalDay,
    required this.semester1TotalEvening,
    required this.semester1Total,
    required this.semester2,
    required this.semester2Rate,
    required this.semester2TotalDay,
    required this.semester2TotalEvening,
    required this.semester2Total,
    required this.yearTotal,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      firstName.hashCode ^
      middleName.hashCode ^
      lastName.hashCode ^
      commentSemester1.hashCode ^
      commentSemester2.hashCode ^
      rank.hashCode ^
      semester1.hashCode ^
      semester1Rate.hashCode ^
      semester1TotalDay.hashCode ^
      semester1TotalEvening.hashCode ^
      semester1Total.hashCode ^
      semester2.hashCode ^
      semester2Rate.hashCode ^
      semester2TotalDay.hashCode ^
      semester2TotalEvening.hashCode ^
      semester2Total.hashCode ^
      yearTotal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutputPersonalTable &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          firstName == other.firstName &&
          middleName == other.middleName &&
          lastName == other.lastName &&
          commentSemester1 == other.commentSemester1 &&
          commentSemester2 == other.commentSemester2 &&
          rank == other.rank &&
          semester1 == other.semester1 &&
          semester1Rate == other.semester1Rate &&
          semester1TotalDay == other.semester1TotalDay &&
          semester1TotalEvening == other.semester1TotalEvening &&
          semester1Total == other.semester1Total &&
          semester2 == other.semester2 &&
          semester2Rate == other.semester2Rate &&
          semester2TotalDay == other.semester2TotalDay &&
          semester2TotalEvening == other.semester2TotalEvening &&
          semester2Total == other.semester2Total &&
          yearTotal == other.yearTotal;
}

class OutputPersonalTables {
  final String workerLastName;
  final List<OutputPersonalTable> tables;

  const OutputPersonalTables({
    required this.workerLastName,
    required this.tables,
  });

  @override
  int get hashCode => workerLastName.hashCode ^ tables.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutputPersonalTables &&
          runtimeType == other.runtimeType &&
          workerLastName == other.workerLastName &&
          tables == other.tables;
}

class ParsedExcelFile {
  final Map<String, List<InputRawRow>> data;

  const ParsedExcelFile({required this.data});

  @override
  int get hashCode => data.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ParsedExcelFile &&
          runtimeType == other.runtimeType &&
          data == other.data;
}
